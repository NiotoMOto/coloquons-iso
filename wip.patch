diff --git a/common/containers/Home.tsx b/common/containers/Home.tsx
index 4e77049..e8324f0 100644
--- a/common/containers/Home.tsx
+++ b/common/containers/Home.tsx
@@ -3,11 +3,11 @@
 import * as React from 'react';
 import * as Highcharts  from 'highcharts';
 global.Highcharts = Highcharts;
-import {Paper, RaisedButton, CircularProgress, FontIcon,Card, CardHeader, CardText, CardActions, Table, TableHeader,TableRow, TableHeaderColumn, TableBody, TableRowColumn} from 'material-ui';
+import {Paper, RaisedButton, CircularProgress, FontIcon,Card, CardHeader, CardText, CardActions, LinearProgress} from 'material-ui';
 import { autobind, filters } from '../services/util';
 import processData from '../services/hangoutParser';
 import Layout from '../components/Layout';
-import SelectUser from '../components/SelectUser';
+import WordsUsed from '../components/WordsUsed';
 import * as ReactHighcharts from 'react-highcharts';
 const { Component } = React;
 import * as _ from 'lodash';
@@ -17,14 +17,16 @@ interface IProps {
 }
 
 interface IStates {
-  chartDatas: any;
-  hasFile: boolean;
+  chartDatas?: any;
+  hasFile?: boolean;
+  completed?: number;
 }
 
 export default class Home extends Component<IProps, IStates> {
   state = {
     chartDatas: [],
-    hasFile: false
+    hasFile: false,
+    completed: 0
   }
   constructor(props){
     super(props);
@@ -39,6 +41,7 @@ export default class Home extends Component<IProps, IStates> {
     const file = e.target.files[0];
     let Hangouts= {};
     if (file) {
+      this.setState({completed: 0});
       var reader = new FileReader();
       reader.readAsText(file, "UTF-8");
       reader.onload = evt => {
@@ -50,11 +53,16 @@ export default class Home extends Component<IProps, IStates> {
           }
         );
       }
+      reader.onprogress = data => {
+      if (data.lengthComputable) {
+          var progress = parseInt( ((data.loaded / data.total) * 100), 10 );
+          this.setState({completed: progress});
+      }
+  }
       reader.onerror = function (evt) {
         alert("Error reading file");
       }
     }
-
   }
 
   render(): JSX.Element {
@@ -164,6 +172,7 @@ export default class Home extends Component<IProps, IStates> {
                icon={<FontIcon className="icon-file"/>}>
                <input type="file" style={styles.exampleImageInput} onChange={this.onFileChange}/>
              </RaisedButton>
+             <LinearProgress mode="determinate" value={this.state.completed} />
            </CardActions>
         </Card>
         <Paper>
@@ -175,39 +184,7 @@ export default class Home extends Component<IProps, IStates> {
         <Paper>
           {chartMedias}
         </Paper>
-        <Table>
-          <TableHeader>
-            <TableRow>
-              <TableHeaderColumn>ID</TableHeaderColumn>
-              <TableHeaderColumn>Nombre de mots diff√©rents</TableHeaderColumn>
-              <TableHeaderColumn>1</TableHeaderColumn>
-              <TableHeaderColumn>2</TableHeaderColumn>
-              <TableHeaderColumn>3</TableHeaderColumn>
-              <TableHeaderColumn>4</TableHeaderColumn>
-              <TableHeaderColumn>5</TableHeaderColumn>
-              <TableHeaderColumn>6</TableHeaderColumn>
-              <TableHeaderColumn>7</TableHeaderColumn>
-              <TableHeaderColumn>8</TableHeaderColumn>
-              <TableHeaderColumn>9</TableHeaderColumn>
-              <TableHeaderColumn>10</TableHeaderColumn>
-            </TableRow>
-          </TableHeader>
-          <TableBody>
-          {
-            _.map(this.state.chartDatas, user => {
-              return  <TableRow key={user.name}>
-                <TableRowColumn>{user.name}</TableRowColumn>
-                <TableRowColumn>{user.wordCount}</TableRowColumn>
-                {
-                  _.map(user.data[3], w => {
-                    return <TableRowColumn key={w.word}><strong>{w.word}</strong> {w.count}</TableRowColumn>
-                  })
-                }
-              </TableRow>
-            })
-          }
-          </TableBody>
-        </Table>
+        <WordsUsed chartDatas={this.state.chartDatas} />
       </Layout>
     );
   }
diff --git a/common/services/hangoutParser.ts b/common/services/hangoutParser.ts
index e1a8b8f..0aac18e 100644
--- a/common/services/hangoutParser.ts
+++ b/common/services/hangoutParser.ts
@@ -1,6 +1,6 @@
 import * as _ from 'lodash';
 
-export default function processData(Hangouts) {
+export default function processDataLodash(Hangouts) {
 	let Conversations = {};
 	let all_participants = {};
 	let key = '';
@@ -9,33 +9,33 @@ export default function processData(Hangouts) {
 	// const commonWords =['je', 'tu', 'il', 'nous', 'vous', 'ils', 'on', 'elle','j', 'mais', 'ou', 'est', 'donc', 'or', 'ni', 'car', 'de', 'dans', 'ta', 'le', 'la', 'a', 'pas', 'd', 'c', 'un', 'une', 'et', 'mon', 'ma','que', 'les', 'en','ca'];
 	const commonWords = [''];
 	const stats = {};
+	const start = Date.now();
 		// First we want to get all participants, so we loop fully once
+		const start2 = Date.now();
 		for(key in Hangouts['conversation_state']) {
 			var conversation = Hangouts['conversation_state'][key]['conversation_state']['conversation'];
 			// Get all participants
-			for(person_key in conversation['participant_data']){
-				var person  = conversation['participant_data'][person_key];
-				var gaia_id = person['id']['gaia_id'];
-				if(!person['fallback_name'] || person['fallback_name'] == null) continue;
-				if(!all_participants[gaia_id])
-					all_participants[gaia_id] = person['fallback_name'];
-					stats[all_participants[gaia_id]] = {
-						messages: 0,
-						characters: 0,
-						images: 0,
-						words: 0,
-						diffWord: {}
-					};
-			}
+			_.map(conversation['participant_data'], person => {
+        var gaia_id = person['id']['gaia_id'];
+        if(!person['fallback_name'] || person['fallback_name'] == null) return;
+        if(!all_participants[gaia_id])
+          all_participants[gaia_id] = person['fallback_name'];
+          stats[all_participants[gaia_id]] = {
+            messages: 0,
+            characters: 0,
+            images: 0,
+            words: 0,
+            diffWord: {}
+          };
+      })
 		}
-		for(key in Hangouts['conversation_state']) {
-			var conversation_state = Hangouts['conversation_state'][key];
+    console.log((Date.now()-start2) / 1000);
+    _.map(Hangouts['conversation_state'], conversation_state => {
 			var id = conversation_state['conversation_id']['id'];
 			var conversation = conversation_state['conversation_state']['conversation'];
 			// Find participants
 			var participants = [], participants_obj = {};
-			for(person_key in conversation['participant_data']){
-				var person  = conversation['participant_data'][person_key];
+      _.map(conversation['participant_data'], person => {
 				var gaia_id = person['id']['gaia_id'];
 				var name = "Unknown";
 				if(person['fallback_name']){
@@ -45,22 +45,20 @@ export default function processData(Hangouts) {
 				}
 				participants.push(name);
 				participants_obj[gaia_id] = name;
-			}
+			})
 			var participants_string = participants.join(", ");
 			// Add to list
 			// $(".convo-list").append("<a href=\"javascript:void(0);\" onclick=\"switchConvo('"+id+"')\" class=\"list-group-item\">" + participants_string + "</a>");
 			// Parse events
 			var events = [];
-			for(event_key in conversation_state['conversation_state']['event']){
-				var convo_event = conversation_state['conversation_state']['event'][event_key];
+      _.map(conversation_state['conversation_state']['event'], convo_event => {
 				var sender = convo_event['sender_id']['gaia_id'];
-				var message = "";
-				var timestamp = convo_event['timestamp'];
+				// var message = "";
+				// var timestamp = convo_event['timestamp'];
 				if(convo_event['chat_message']){
 					// Get message
-					for(let msg_key in convo_event['chat_message']['message_content']['segment']){
-						var segment = convo_event['chat_message']['message_content']['segment'][msg_key];
-						if(!segment['text']) continue;
+					_.map(convo_event['chat_message']['message_content']['segment'], segment => {
+						if(!segment['text']) return;
 						let words = _.words(segment['text']);
 
 						if(stats[participants_obj[sender]]) {
@@ -80,46 +78,50 @@ export default function processData(Hangouts) {
 							stats[participants_obj[sender]].characters += segment['text'].length;
 							stats[participants_obj[sender]].words +=words.length;
 						}
-						message += segment['text'];
-					}
+						// message += segment['text'];
+					})
 					// Check for images on event
 					if(convo_event['chat_message']['message_content']['attachment']){
 						for(var attach_key in convo_event['chat_message']['message_content']['attachment']){
-							var attachment = convo_event['chat_message']['message_content']['attachment'][attach_key];
+							// var attachment = convo_event['chat_message']['message_content']['attachment'][attach_key];
 							if(stats[participants_obj[sender]]) {
 								stats[participants_obj[sender]].images = stats[participants_obj[sender]].images + 1;
 							}
-							if(attachment['embed_item']['type'][0] == "PLUS_PHOTO"){
-								message += "\n<a target='blank' href='" + attachment['embed_item']['embeds.PlusPhoto.plus_photo']['url'] + "'><img class='thumb' src='" + attachment['embed_item']['embeds.PlusPhoto.plus_photo']['thumbnail']['image_url'] + "' /></a>";
-							}
+							// if(attachment['embed_item']['type'][0] == "PLUS_PHOTO"){
+							// 	message += "\n<a target='blank' href='" + attachment['embed_item']['embeds.PlusPhoto.plus_photo']['url'] + "'><img class='thumb' src='" + attachment['embed_item']['embeds.PlusPhoto.plus_photo']['thumbnail']['image_url'] + "' /></a>";
+							// }
 						}
 					}
 					if(stats[participants_obj[sender]]) {
 						stats[participants_obj[sender]].messages = stats[participants_obj[sender]].messages + 1;
 					}
-					events.push({sender: participants_obj[sender], message: message, timestamp: timestamp});
+					// events.push({sender: participants_obj[sender], message: message, timestamp: timestamp});
 				}
-			}
+			})
 
 			// Sort events by timestamp
-			events.sort(function(a, b){
-				var keyA = a.timestamp,
-				    keyB = b.timestamp;
-				if(keyA < keyB) return -1;
-				if(keyA > keyB) return 1;
-				return 0;
-			});
+			// events.sort(function(a, b){
+			// 	var keyA = a.timestamp,
+			// 	    keyB = b.timestamp;
+			// 	if(keyA < keyB) return -1;
+			// 	if(keyA > keyB) return 1;
+			// 	return 0;
+			// });
 			// Add events
 			Conversations[id] = events;
-		}
+		});
 		const data = [];
 		let user = '';
+    const start3 = Date.now();
 		for(user in stats) {
 			data.push({
 				name: user,
 				wordCount: _.size(stats[user].diffWord),
-				data: [stats[user].messages, stats[user].characters, stats[user].images, _.take(_.orderBy(_.values(stats[user].diffWord),['count'],['desc']), 10)]
+				data: [stats[user].messages, stats[user].characters, stats[user].images, _.take(_.orderBy(_.values(stats[user].diffWord),['count'],['desc']), 50)]
 			});
 		}
+    console.log('loop stats', (Date.now()-start3) / 1000);
+		const end = Date.now();
+		console.log((end-start)/1000, 'secondes');
     return data;
 	}
diff --git a/package.json b/package.json
index 9947db7..588565d 100644
--- a/package.json
+++ b/package.json
@@ -7,6 +7,7 @@
     "install": "tsd reinstall"
   },
   "dependencies": {
+    "async": "^1.5.2",
     "bunyan": "^1.5.1",
     "bunyan-format": "^0.2.1",
     "chart.js": "^1.0.2",
diff --git a/scss/fonts/icons/icons.eot b/scss/fonts/icons/icons.eot
index 4dcfe94..edafda2 100644
Binary files a/scss/fonts/icons/icons.eot and b/scss/fonts/icons/icons.eot differ
diff --git a/scss/fonts/icons/icons.ttf b/scss/fonts/icons/icons.ttf
index 33a6bb9..c071116 100644
Binary files a/scss/fonts/icons/icons.ttf and b/scss/fonts/icons/icons.ttf differ
diff --git a/scss/fonts/icons/icons.woff b/scss/fonts/icons/icons.woff
index a1e385d..251e573 100644
Binary files a/scss/fonts/icons/icons.woff and b/scss/fonts/icons/icons.woff differ
diff --git a/tsconfig.json b/tsconfig.json
index 18a167e..5d648d7 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -18,9 +18,11 @@
   },
   "compileOnSave": false,
   "files": [
+    "./typings/async/async.d.ts",
     "./typings/highcharts/highcharts.d.ts",
     "./typings/lodash/lodash.d.ts",
     "./typings/node/node.d.ts",
+    "./typings/parallel/parallel.d.ts",
     "./typings/react/react-dom.d.ts",
     "./typings/react/react.d.ts",
     "./typings/superagent/superagent.d.ts",
@@ -35,6 +37,7 @@
     "./common/components/Layout.tsx",
     "./common/components/MenuLeftNav.tsx",
     "./common/components/SelectUser.tsx",
+    "./common/components/WordsUsed.tsx",
     "./common/containers/Home.tsx",
     "./common/containers/index.ts",
     "./common/containers/Login.tsx",
diff --git a/tsd.json b/tsd.json
index 80f90ad..79551df 100644
--- a/tsd.json
+++ b/tsd.json
@@ -21,6 +21,9 @@
     },
     "highcharts/highcharts.d.ts": {
       "commit": "44c9273e1e92bc95368f599d1dcda9f560a68956"
+    },
+    "async/async.d.ts": {
+      "commit": "bcd5761826eb567876c197ccc6a87c4d05731054"
     }
   }
 }
